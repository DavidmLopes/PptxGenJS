"use strict";(self.webpackChunkpptxgenjs_gh_pages=self.webpackChunkpptxgenjs_gh_pages||[]).push([[2445],{636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"usage-saving","title":"Saving Presentations","description":"Several methods are available when generating a presentation.","source":"@site/docs/usage-saving.md","sourceDirName":".","slug":"/usage-saving","permalink":"/PptxGenJS/docs/usage-saving","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Brent Ely","lastUpdatedAt":1747697770000,"frontMatter":{"id":"usage-saving","title":"Saving Presentations"},"sidebar":"docs","previous":{"title":"Slide Properties and Methods","permalink":"/PptxGenJS/docs/usage-slide-options"},"next":{"title":"HTML-to-PowerPoint","permalink":"/PptxGenJS/docs/html-to-powerpoint"}}');var i=n(4848),l=n(8453);const r={id:"usage-saving",title:"Saving Presentations"},a=void 0,o={},d=[{value:"Saving as a File (writeFile)",id:"saving-as-a-file-writefile",level:2},{value:"Write File Props (<code>WriteFileProps</code>)",id:"write-file-props-writefileprops",level:3},{value:"Write File Example",id:"write-file-example",level:3},{value:"Generating Other Formats (write)",id:"generating-other-formats-write",level:2},{value:"Write Props (<code>WriteProps</code>)",id:"write-props-writeprops",level:3},{value:"Write Output Types",id:"write-output-types",level:3},{value:"Write Example",id:"write-example",level:3},{value:"Streaming in Node.js (stream)",id:"streaming-in-nodejs-stream",level:2},{value:"Stream Example",id:"stream-example",level:3},{value:"Saving Multiple Presentations",id:"saving-multiple-presentations",level:2},{value:"In the Browser",id:"in-the-browser",level:3},{value:"In Node.js",id:"in-nodejs",level:3}];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Several methods are available when generating a presentation."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"All methods return a Promise"}),"\n",(0,i.jsxs)(t.li,{children:["Working examples are available under ",(0,i.jsx)(t.a,{href:"https://github.com/gitbrent/PptxGenJS/tree/master/demos",children:"/PptxGenJS/demos"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"saving-as-a-file-writefile",children:"Saving as a File (writeFile)"}),"\n",(0,i.jsx)(t.p,{children:"Save the presentation as a PowerPoint .pptx file."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"In browser-based apps, this triggers a download using the correct pptx MIME-type."}),"\n",(0,i.jsx)(t.li,{children:"In Node.js, it saves to disk via the native fs module."}),"\n"]}),"\n",(0,i.jsxs)(t.h3,{id:"write-file-props-writefileprops",children:["Write File Props (",(0,i.jsx)(t.code,{children:"WriteFileProps"}),")"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Option"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"compression"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"false"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"apply zip compression (exports take longer but saves signifcant space)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"fileName"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"'Presentation.pptx'"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"output filename"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"write-file-example",children:"Write File Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// For simple cases, you can omit `then`\npptx.writeFile({ fileName: 'Browser-PowerPoint-Demo.pptx' });\n\n// Using Promise to determine when the file has actually completed generating\npptx.writeFile({ fileName: 'Browser-PowerPoint-Demo.pptx' });\n    .then(fileName => {\n        console.log(`created file: ${fileName}`);\n    });\n"})}),"\n",(0,i.jsx)(t.h2,{id:"generating-other-formats-write",children:"Generating Other Formats (write)"}),"\n",(0,i.jsx)(t.p,{children:"Generate the presentation in various formats (e.g., base64, arraybuffer) \u2014 useful for uploading to cloud storage or handling in-memory."}),"\n",(0,i.jsxs)(t.h3,{id:"write-props-writeprops",children:["Write Props (",(0,i.jsx)(t.code,{children:"WriteProps"}),")"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Option"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"compression"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"false"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"apply zip compression (exports take longer but save significant space)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"outputType"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"blob"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"'arraybuffer', 'base64', 'binarystring', 'blob', 'nodebuffer', 'uint8array'"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"write-output-types",children:"Write Output Types"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"outputType"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"blob"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Default for browsers"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"arraybuffer"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Often used with WebAssembly or binary tools"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"base64"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Useful for uploads to APIs like Google Drive"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nodebuffer"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Use in Node.js with fs.writeFile()"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"write-example",children:"Write Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'pptx.write({ outputType: "base64" })\n    .then((data) => {\n        console.log("write as base64: Here are 0-100 chars of `data`:\\n");\n        console.log(data.substring(0, 100));\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n'})}),"\n",(0,i.jsx)(t.h2,{id:"streaming-in-nodejs-stream",children:"Streaming in Node.js (stream)"}),"\n",(0,i.jsx)(t.p,{children:"Returns the presentation as a binary string, suitable for streaming in HTTP responses or writing directly to disk in Node.js environments."}),"\n",(0,i.jsx)(t.h3,{id:"stream-example",children:"Stream Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'// SRC: https://github.com/gitbrent/PptxGenJS/blob/master/demos/node/demo_stream.js\n// HOW: using: `const app = express();``\npptx.stream()\n    .then((data) => {\n        app.get("/", (req, res) => {\n            res.writeHead(200, { "Content-disposition": "attachment;filename=" + fileName, "Content-Length": data.length });\n            res.end(new Buffer(data, "binary"));\n        });\n        app.listen(3000, () => {\n            console.log("PptxGenJS Node Stream Demo app listening on port 3000!");\n            console.log("Visit: http://localhost:3000/");\n            console.log("(press Ctrl-C to quit demo)");\n        });\n    })\n    .catch((err) => {\n        console.log("ERROR: " + err);\n    });\n'})}),"\n",(0,i.jsx)(t.h2,{id:"saving-multiple-presentations",children:"Saving Multiple Presentations"}),"\n",(0,i.jsx)(t.h3,{id:"in-the-browser",children:"In the Browser"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Each new presentation should use a fresh new PptxGenJS() instance to avoid reusing slides or metadata."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'let pptx = null;\n\n// Presentation 1:\npptx = new PptxGenJS();\npptx.addSlide().addText("Presentation 1", { x: 1, y: 1 });\npptx.writeFile({ fileName: "PptxGenJS-Browser-1" });\n\n// Presentation 2:\npptx = new PptxGenJS();\npptx.addSlide().addText("Presentation 2", { x: 1, y: 1 });\npptx.writeFile({ fileName: "PptxGenJS-Browser-2" });\n'})}),"\n",(0,i.jsx)(t.h3,{id:"in-nodejs",children:"In Node.js"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["See ",(0,i.jsx)(t.code,{children:"demos/node/demo.js"})," for a working demo with multiple presentations, promises, etc."]}),"\n",(0,i.jsxs)(t.li,{children:["See ",(0,i.jsx)(t.code,{children:"demos/node/demo_stream.js"})," for a working demo using streaming"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'import pptxgen from "pptxgenjs";\n\n// Presentation 1:\nlet pptx1 = new pptxgen();\npptx1.addSlide().addText("Presentation 1", { x: 1, y: 1 });\npptx1.writeFile({ fileName: "PptxGenJS-NodePres-1" });\n\n// Presentation 2:\nlet pptx2 = new pptxgen();\npptx2.addSlide().addText("Presentation 2", { x: 1, y: 1 });\npptx2.writeFile({ fileName: "PptxGenJS-NodePres-2" });\n'})})]})}function c(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);